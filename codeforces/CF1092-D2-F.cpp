/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag dp_on_trees, rerooting
 * @idea
 *    - root the tree and solve, this is accumulative
 *    sum of sizes.
 *    - use rerooting technique.
 */

#include <bits/stdc++.h>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
const int mod = 1e9 + 7;
const int maxn = 2e5 + 10;
vi g[maxn];
ll dp[maxn];
ll sz[maxn];
int a[maxn];
int n;

void dfs(int x, int p) {
    sz[x] = a[x];
    for (int v : g[x]) {
        if (v == p) continue;
        dfs(v, x);
        sz[x] += sz[v];
        dp[x] += dp[v] + sz[v];
    }
}

void dfs_reroot(int x, int p) {
    if (p != 0) {
        dp[x] += (dp[p] - dp[x] - sz[x]) + (sz[p] - sz[x]);
        sz[x] = sz[p];
    }
    for (int v : g[x]) {
        if (v == p) continue;
        dfs_reroot(v, x);
    }
}

class TaskF {
public:

    void solveOne(istream& in, ostream& out) {
        in >> n;
        re(i, 1, n+1) in >> a[i];
        re(i, 1, n) {
            int a, b;
            in >> a >> b;
            g[a].eb(b);
            g[b].eb(a);
        }
        dfs(1, 0);
        dfs_reroot(1, 0);
        out << *max_element(dp, dp+n+1) << endl;
    }

    void solve(istream& in, ostream& out) {
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0); cout.tie(0);
	TaskF solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
