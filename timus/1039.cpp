/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag dp on trees, fibonacci approach
 * @idea 
 *    - dp on trees aplication
 */

#include <bits/stdc++.h>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
const int mod = 1e9 + 7;
const int maxn = 6e3 + 10;
vi g[maxn];
int c[maxn];
int dp[maxn][2];
int n;

void dfs(int x, int p) {
  dp[x][0] = 0;
  dp[x][1] = c[x];
  for (int v : g[x]) {
    if (v == p) continue;
    dfs(v, x);
    dp[x][0] += max(dp[v][0], dp[v][1]);
    dp[x][1] += dp[v][0];
  }
}

class MaximumSumOnATree {
public:

    void solveOne(istream& in, ostream& out) {
      in >> n;
      re(i, 1, n+1) {
        g[i].clear();
      }
      re(i, 1, n+1) {
        in >> c[i];
      }
      re(i, 1, n) {
        int a, b;
        in >> a >> b;
        g[a].eb(b);
        g[b].eb(a);
      }
      dfs(1, 0);
      out << max(dp[1][0], dp[1][1]) << "\n";
    }

    void solve(istream& in, ostream& out) {
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
	MaximumSumOnATree solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
