/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag binary_search, math, greedy
 * @idea
 *     - we can take greedily elements with better a[i] / (x * (x + 1))
 *
 *     - As simulating can cause a time limit, we do a binary search
 *     on the last t = a[i] / (x * (x + 1)) that we use, and we look
 *     at how many cows we need for that.
 *
 *     - for this I must find the maximum x such that t <= a[i] / (x * (x + 1))
 *     this is x^2 + x - a[i]/t <= 0 -> x = (-1 + sqrt(1 + 4*a[i]/t)) / 2
 *     plus one because a[i] / (x*(x+1)) is a difference.
 *
 *     - at the end, each unused cow contributes with t (obtained in the binary)
 *
 */

#include <bits/stdc++.h>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
const int mod = 1e9 + 7;
const int maxn = 1e5 + 10;
ll a[maxn];
int n;
ll k;

class USACO_17jan_tallbarn_plat {
public:
    bool p(double x) {
        ll res = 0;
        re(i, 0, n) {
            res += (-1 + sqrt(1 + 4*a[i]/x)) / 2;
        }
        return res >= (k - n);
    }
    void solveOne(istream& in, ostream& out) {
        in >> n >> k;
        re(i, 0, n) {
            in >> a[i];
        }
        double lo = 0, hi = 1e18;
        re(i, 0, 200) {
            double mid = (lo + hi) / 2;
            if (p(mid)) lo = mid;
            else hi = mid;
        }
        double ans = 0;
        re(i, 0, n) {
            ll temp = (-1 + sqrt(1 + 4 * a[i] / lo)) / 2;
            ans += a[i] / (temp + 1.);
            k -= temp + 1;
        }
        ans -= k * lo;
        out << (ll)round(ans) << endl;
    }

    void solve(istream& in, ostream& out) {
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    freopen("tallbarn.in" ,"r" ,stdin);
    freopen("tallbarn.out" ,"w" ,stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
	USACO_17jan_tallbarn_plat solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
