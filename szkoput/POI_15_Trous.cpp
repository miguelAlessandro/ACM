/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag binary_search, two_pointers
 * @idea
 *      - we can binary search this!
 *
 *      - we keep two windows, one for the table and 
 *      the other to check if there is an answer in 
 *      the binary search
 * @complexity O(n\log n)
 */

#include <bits/stdc++.h>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
const int mod = 1e9 + 7;
const int maxn = 2e6 + 10;
ll sum[maxn], windows_sum[maxn];

class POI_15_Trous {
public:
    int d, n;
    long long p;
    bool f(int len) {
        if (len == d) return true;
        deque<ll> best;
        for (int i = d; i <= n; ++i) {
            while (!best.empty() and best.front() - d + 1 < i - len + 1) best.pop_front();
            while (!best.empty() and windows_sum[best.back()] < windows_sum[i]) best.pop_back();
            best.push_back(i);
            if (i < len) continue;
            long long acc = sum[i] - sum[max(0, i - len)];
            acc -= windows_sum[best.front()];
            if (acc <= p) return true;
        }
        return false;
    }

    void solveOne(istream& in, ostream& out) {
        in >> n >> p >> d;
        vi a(n);
        trav(&v, a) in >> v;
        re(i, 1, n+1) {
            sum[i] = a[i-1] + sum[i-1];
        }
        re(i, 1, n+1) {
            windows_sum[i] = sum[i] - sum[max(0, i - d)];
        }
        int lo = d, hi = n;
        while (lo < hi) {
            int mid = lo + (hi - lo + 1) / 2;
            if (f(mid)) lo = mid;
            else hi = mid-1;
        }
        out << lo << endl;
    }

    void solve(istream& in, ostream& out) {
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
	POI_15_Trous solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
