/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag brute_force, bitmask, dp
 * @idea
 *      - select a subset, use it and
 *      so recursively.
 *
 *      - we can build a dp with this form:
 *
 *          dp(set) = min_{subset \in set} (dp(subset) + slowest_time(subset))
 *
 *      - the sum of lengths for every subset is O(3^n). 
 *      
 * @complexity O(3^n)
 */

#include <bits/stdc++.h>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
const int mod = 1e9 + 7;

class POI_04_Passage {
public:

    void solveOne(istream& in, ostream& out) {
        int W, n;
        in >> W >> n;
        vector<int> t(n);
        vector<int> w(n);
        for (int i = 0; i < n; ++i) {
            in >> t[i] >> w[i];
        }
        vector<int> group_t(1<<n);
        vector<int> group_w(1<<n);
        for (int i = 0; i < 1<<n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i & (1<<j)) {
                    group_w[i] += w[j];
                    group_t[i] = max(group_t[i], t[j]);
                }
            }
        }
        vector<int> dp(1<<n);
        dp[0] = 0;
        for (int i = 1; i < 1<<n; ++i) {
            dp[i] = 1e9;
            for (int s = i; s > 0; s = (s - 1) & i) {
                if (group_w[s] <= W) {
                    dp[i] = min(dp[i], dp[i^s] + group_t[s]);
                }
            }
        }
        out << dp[(1<<n)-1] << endl;
    }

    void solve(istream& in, ostream& out) {
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
	POI_04_Passage solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
